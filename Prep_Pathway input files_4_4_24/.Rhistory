# Split the 'cpd.hits' column into a list of vectors
DF_1$cpd.hits_list <- strsplit(as.character(DF_1$cpd.hits), ";")
# Check the structure of the modified data frame
str(DF_1)
#### STEP 1.2 build DF_2 from
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_matched_compound_all.csv"
# Load the Excel file
DF_2 <- read.csv(file_path)
# Check the structure of the modified data frame
str(DF_2)
#### STEP 1.3 build DF_3 from "msfile2_input"
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/input_msfile/msfile2_F8vsF3.txt"
# Load the tab-separated text file
DF_3 <- read.table(file_path, header = TRUE, sep = "\t")
# Check the structure of the loaded data
str(DF_3)
#### STEP 1.4 making F8vsF3
DF_4 <- DF_3
# Assuming DF_2 and DF_4 are your data frames
# Merge DF_4 with DF_2 based on matching 'm.z' and 'Query.Mass' columns
merged_data <- merge(DF_4, DF_2, by.x = "m.z", by.y = "Query.Mass", all.x = TRUE)
library(tidyr)
# Create DF_5 by expanding the cpd.hits_list column
DF_5 <- DF_1 %>%
unnest(cpd.hits_list)
# Print DF_5
print(DF_5)
View(DF_5)
library(tidyr)
# Example dataframe DF_1
DF_1 <- data.frame(X = 1:3,
cpd.hits_list = list(c("EC0001", "EC0005", "EC0006", "EC00033"),
c("EC0002", "EC0004", "EC0007", "EC00035"),
c("EC0003", "EC0008", "EC0009", "EC00036")))
library(tidyr)
# Example dataframe DF_1
DF_1 <- data.frame(X = 1:3,
cpd.hits_list = list(c("EC0001", "EC0005", "EC0006", "EC00033"),
c("EC0002", "EC0004", "EC0007", "EC00035"),
c("EC0003", "EC0008", "EC0009", "EC00036")))
# Example dataframe DF_1 with corrected list lengths
DF_1 <- data.frame(X = 1:3,
cpd.hits_list = list(c("EC0001", "EC0005", "EC0006", "EC00033"),
c("EC0002", "EC0004", "EC0007", "EC00035"),
c("EC0003", "EC0008", "EC0009", "EC00036")))
# Example dataframe DF_1 with corrected list lengths
DF_1 <- data.frame(X = 1:4,
cpd.hits_list = list(c("EC0001", "EC0005", "EC0006", "EC00033"),
c("EC0002", "EC0004", "EC0007", "EC00035"),
c("EC0003", "EC0008", "EC0009", "EC00036"),
character(0)))
DF_1 <- data.frame(X = 1:4,
cpd.hits_list = list(c("EC0001", "EC0005", "EC0006", "EC00033"),
c("EC0002", "EC0004", "EC0007", "EC00035"),
c("EC0003", "EC0008", "EC0009", "EC00036"),
character(0)))
library(readxl)
#### STEP 1.1 build DF_1 from "mummichog_pathway_enrichment_mummichog" ####
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_pathway_enrichment_mummichog.csv"
# Load the Excel file
DF_1 <- read.csv(file_path)
### cpd.hits conversion to stringlist
# Assuming your data frame is named 'data'
# Split the 'cpd.hits' column into a list of vectors
DF_1$cpd.hits_list <- strsplit(as.character(DF_1$cpd.hits), ";")
# Check the structure of the modified data frame
str(DF_1)
#### STEP 1.2 build DF_2 from
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_matched_compound_all.csv"
# Load the Excel file
DF_2 <- read.csv(file_path)
# Check the structure of the modified data frame
str(DF_2)
#### STEP 1.3 build DF_3 from "msfile2_input"
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/input_msfile/msfile2_F8vsF3.txt"
# Load the tab-separated text file
DF_3 <- read.table(file_path, header = TRUE, sep = "\t")
# Check the structure of the loaded data
str(DF_3)
#### STEP 1.4 making F8vsF3
DF_4 <- DF_3
# Assuming DF_2 and DF_4 are your data frames
# Merge DF_4 with DF_2 based on matching 'm.z' and 'Query.Mass' columns
merged_data <- merge(DF_4, DF_2, by.x = "m.z", by.y = "Query.Mass", all.x = TRUE)
#### make list ####
library(tidyr)
# Create DF_5 by expanding the cpd.hits_list column
DF_5 <- DF_1 %>%
unnest(cpd.hits_list)
# Print DF_5
print(DF_5)
View(DF_5)
# Create DF_5 by expanding the cpd.hits_list column
DF_5 <- DF_1 %>%
unnest(cpd.hits_list)
# Print DF_5
print(DF_5)
View(merged_data)
View(DF_5)
library(readxl)
#### STEP 1.1 build DF_1 from "mummichog_pathway_enrichment_mummichog" ####
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_pathway_enrichment_mummichog.csv"
# Load the Excel file
DF_1 <- read.csv(file_path)
### cpd.hits conversion to stringlist
# Assuming your data frame is named 'data'
# Split the 'cpd.hits' column into a list of vectors
DF_1$cpd.hits_list <- strsplit(as.character(DF_1$cpd.hits), ";")
# Check the structure of the modified data frame
str(DF_1)
#### STEP 1.2 build DF_2 from
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_matched_compound_all.csv"
# Load the Excel file
DF_2 <- read.csv(file_path)
# Check the structure of the modified data frame
str(DF_2)
#### STEP 1.3 build DF_3 from "msfile2_input"
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/input_msfile/msfile2_F8vsF3.txt"
# Load the tab-separated text file
DF_3 <- read.table(file_path, header = TRUE, sep = "\t")
# Check the structure of the loaded data
str(DF_3)
#### STEP 1.4 making F8vsF3
DF_4 <- DF_3
# Assuming DF_2 and DF_4 are your data frames
# Merge DF_4 with DF_2 based on matching 'm.z' and 'Query.Mass' columns
merged_data <- merge(DF_4, DF_2, by.x = "m.z", by.y = "Query.Mass", all.x = TRUE)
#### make list ####
# Create DF_5 by expanding the cpd.hits_list column
DF_5 <- DF_1 %>%
unnest(cpd.hits_list)
# Print DF_5
print(DF_5)
View(DF_4)
View(DF_5)
# Get unique pathway names
pathway_names <- unique(DF_5$X)
# Create a list to store the dataframes
pathway_dfs <- list()
# Loop over each pathway name
for (pathway_name in pathway_names) {
# Subset DF_5 for the current pathway
pathway_df <- DF_5[DF_5$X == pathway_name, ]
# Store the subset dataframe in the list
pathway_dfs[[pathway_name]] <- pathway_df
}
# Print the list of dataframes
print(pathway_dfs)
# Access a specific pathway dataframe (e.g., pathway named 'Pathway1')
print(pathway_dfs[["Pathway1"]])
View(merged_data)
View(pathway_df)
View(pathway_df)
View(merged_data)
View(pathway_dfs)
pathway_dfs[["Glycosphingolipid biosynthesis - ganglioseries"]][["cpd.hits_list"]]
View(DF_4)
View(DF_3)
View(DF_2)
View(DF_5)
View(DF_1)
View(DF_2)
View(DF_3)
View(DF_4)
View(DF_4)
View(merged_data)
# Function to convert empirical compound names to KEGG IDs
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs
kegg_ids <- merged_data$Matched.Compound[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Loop over each pathway dataframe in the list
for (pathway_name in pathway_names) {
# Get the pathway dataframe
pathway_df <- pathway_dfs[[pathway_name]]
# Apply the conversion function to create the KEGG.list column
pathway_df$KEGG.list <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
# Print the updated pathway dataframe
print(pathway_df)
}
View(pathway_dfs)
# Function to convert empirical compound names to KEGG IDs
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs
kegg_ids <- merged_data$Matched.Compound[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Apply the conversion function to each pathway dataframe in the list
pathway_dfs <- lapply(pathway_dfs, function(pathway_df) {
pathway_df$KEGG.list <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
return(pathway_df)
})
# Print the updated pathway dataframes
print(pathway_dfs)
View(pathway_dfs)
View(DF_1)
View(DF_2)
View(DF_3)
View(DF_4)
View(DF_5)
View(merged_data)
# Function to convert empirical compound names to KEGG IDs using 't.score'
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs based on 't.score'
kegg_ids <- merged_data$Matched.Compound[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Apply the conversion function to each pathway dataframe in the list
pathway_dfs <- lapply(pathway_dfs, function(pathway_df) {
pathway_df$t.score.val <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
return(pathway_df)
})
# Print the updated pathway dataframes
print(pathway_dfs)
View(pathway_dfs)
# Function to convert empirical compound names to KEGG IDs using t.score
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs using t.score
kegg_ids <- merged_data$t.score[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Apply the conversion function to each pathway dataframe in the list
pathway_dfs <- lapply(pathway_dfs, function(pathway_df) {
pathway_df$t.score.val <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
return(pathway_df)
})
# Print the updated pathway dataframes
print(pathway_dfs)
View(pathway_dfs)
library(readxl)
#### STEP 1.1 build DF_1 from "mummichog_pathway_enrichment_mummichog" ####
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_pathway_enrichment_mummichog.csv"
# Load the Excel file
DF_1 <- read.csv(file_path)
### cpd.hits conversion to stringlist
# Assuming your data frame is named 'data'
# Split the 'cpd.hits' column into a list of vectors
DF_1$cpd.hits_list <- strsplit(as.character(DF_1$cpd.hits), ";")
# Check the structure of the modified data frame
str(DF_1)
#### STEP 1.2 build DF_2 from
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_matched_compound_all.csv"
# Load the Excel file
DF_2 <- read.csv(file_path)
# Check the structure of the modified data frame
str(DF_2)
#### STEP 1.3 build DF_3 from "msfile2_input"
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/input_msfile/msfile2_F8vsF3.txt"
# Load the tab-separated text file
DF_3 <- read.table(file_path, header = TRUE, sep = "\t")
# Check the structure of the loaded data
str(DF_3)
#### STEP 1.4 making F8vsF3
DF_4 <- DF_3
# Assuming DF_2 and DF_4 are your data frames
# Merge DF_4 with DF_2 based on matching 'm.z' and 'Query.Mass' columns
merged_data <- merge(DF_4, DF_2, by.x = "m.z", by.y = "Query.Mass", all.x = TRUE)
#### make list ####
# Create DF_5 by expanding the cpd.hits_list column
DF_5 <- DF_1 %>%
unnest(cpd.hits_list)
# Print DF_5
print(DF_5)
####
# Get unique pathway names
pathway_names <- unique(DF_5$X)
# Create a list to store the dataframes
pathway_dfs <- list()
# Loop over each pathway name
for (pathway_name in pathway_names) {
# Subset DF_5 for the current pathway
pathway_df <- DF_5[DF_5$X == pathway_name, ]
# Store the subset dataframe in the list
pathway_dfs[[pathway_name]] <- pathway_df
}
# Print the list of dataframes
print(pathway_dfs)
# Access a specific pathway dataframe (e.g., pathway named 'Pathway1')
print(pathway_dfs[["Pathway1"]])
#### ####
# Function to convert empirical compound names to KEGG IDs
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs
kegg_ids <- merged_data$Matched.Compound[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Apply the conversion function to each pathway dataframe in the list
pathway_dfs <- lapply(pathway_dfs, function(pathway_df) {
pathway_df$KEGG.list <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
return(pathway_df)
})
# Print the updated pathway dataframes
print(pathway_dfs)
######
# Function to convert empirical compound names to KEGG IDs using t.score
convert_to_kegg <- function(compounds, merged_data) {
# Extract the empirical compounds from the string
compounds_list <- unlist(strsplit(gsub("[c()']", "", compounds), ", "))
# Match the empirical compounds to KEGG IDs using t.score
kegg_ids <- merged_data$t.score[match(compounds_list, merged_data$Empirical.Compound)]
# Return the KEGG IDs as a vector
return(paste("c(", paste(kegg_ids, collapse = ", "), ")", sep=""))
}
# Apply the conversion function to each pathway dataframe in the list
pathway_dfs <- lapply(pathway_dfs, function(pathway_df) {
pathway_df$t.score.val <- sapply(pathway_df$cpd.hits_list, convert_to_kegg, merged_data = merged_data)
return(pathway_df)
})
# Print the updated pathway dataframes
print(pathway_dfs)
View(pathway_dfs)
View(DF_5)
View(DF_4)
View(DF_3)
View(merged_data)
View(merged_data)
View(DF_5)
View(DF_5)
View(DF_4)
View(DF_3)
View(DF_2)
View(DF_1)
library(readxl)
#### STEP 1.1 build DF_1 from "mummichog_pathway_enrichment_mummichog" ####
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_pathway_enrichment_mummichog.csv"
# Load the Excel file
DF_1 <- read.csv(file_path)
### cpd.hits conversion to stringlist
# Assuming your data frame is named 'data'
# Split the 'cpd.hits' column into a list of vectors
DF_1$cpd.hits_list <- strsplit(as.character(DF_1$cpd.hits), ";")
# Check the structure of the modified data frame
str(DF_1)
#### STEP 1.2 build DF_2 from
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/S1_F8moVSF3mo_out/mummichog_matched_compound_all.csv"
# Load the Excel file
DF_2 <- read.csv(file_path)
# Check the structure of the modified data frame
str(DF_2)
#### STEP 1.3 build DF_3 from "msfile2_input"
# Replace the file path with your actual file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/input_msfile/msfile2_F8vsF3.txt"
# Load the tab-separated text file
DF_3 <- read.table(file_path, header = TRUE, sep = "\t")
# Check the structure of the loaded data
str(DF_3)
#### STEP 1.4 making F8vsF3
DF_4 <- DF_3
# Assuming DF_2 and DF_4 are your data frames
# Merge DF_4 with DF_2 based on matching 'm.z' and 'Query.Mass' columns
merged_data <- merge(DF_4, DF_2, by.x = "m.z", by.y = "Query.Mass", all.x = TRUE)
View(merged_data)
# Create F8vsF3.data with row names from Matched.Compound in merged_data
F8vsF3.data <- data.frame(row.names = merged_data$Matched.Compound)
# Remove rows with empty or NA 'Matched.Compound'
cleaned_merged_data <- merged_data[!is.na(merged_data$Matched.Compound) & merged_data$Matched.Compound != "", ]
# Merge rows with the same 'Matched.Compound' values
merged_rows <- aggregate(. ~ Matched.Compound, cleaned_merged_data, paste, collapse = ", ")
# Create 'F8vsF3.data' with row names as 'Matched.Compound'
F8vsF3.data <- data.frame(row.names = merged_rows$Matched.Compound)
# Add 'ex1' column from 't.score' column
F8vsF3.data$ex1 <- merged_rows$t.score
# Print 'F8vsF3.data'
print(F8vsF3.data)
View(F8vsF3.data)
# Remove rows with empty or NA 'Matched.Compound'
cleaned_merged_data <- merged_data[!is.na(merged_data$Matched.Compound) & merged_data$Matched.Compound != "", ]
# Calculate the mean 't.score' for each 'Matched.Compound'
cleaned_merged_data$t.score <- as.numeric(cleaned_merged_data$t.score)
merged_rows <- aggregate(t.score ~ Matched.Compound, cleaned_merged_data, mean)
# Create 'F8vsF3.data' with row names as 'Matched.Compound'
F8vsF3.data <- data.frame(row.names = merged_rows$Matched.Compound)
# Add 'ex1' column with the mean 't.score' values
F8vsF3.data$ex1 <- merged_rows$t.score
# Print 'F8vsF3.data'
print(F8vsF3.data)
View(F8vsF3.data)
library(dplyr)
library(stringr)
# Create a helper function to check for matches and return the corresponding pathway
get_pathways <- function(empirical_compound, df_1) {
# Filter DF_1 rows where cpd.hits contains the empirical_compound
matching_rows <- df_1 %>%
filter(str_detect(cpd.hits, empirical_compound))
# If there are matching rows, return the X column values concatenated
if (nrow(matching_rows) > 0) {
return(paste(matching_rows$X, collapse = ", "))
} else {
return(NA)
}
}
# Apply the helper function to each row in merged_data
merged_data <- merged_data %>%
mutate(pathways = sapply(Empirical.Compound, get_pathways, df_1 = DF_1))
# Display the first few rows of the updated merged_data
head(merged_data)
View(merged_data)
# Install and load the openxlsx package if you haven't already
install.packages("openxlsx")
library(openxlsx)
# Set the file path
output_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/F8movsF3mo.xlsx"
# Save the merged_data dataframe as an Excel file
write.xlsx(merged_data, file = output_path)
# Confirm the save by printing a message
cat("The dataframe has been saved as an Excel file at the specified path.")
# Install and load the readxl package if you haven't already
install.packages("readxl")
library(readxl)
# Set the file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/F8movsF3mo_msms_EC_stats_pathways.xlsx"
# Read the Excel file into a dataframe
F8movsF3mo_msms_EC_stats_pathways <- read_excel(file_path)
# Display the first few rows of the dataframe
head(F8movsF3mo_msms_EC_stats_pathways)
View(F8movsF3mo_msms_EC_stats_pathways)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# Order the dataframe by p.value and t.score
F8movsF3mo_msms_EC_stats_pathways <- F8movsF3mo_msms_EC_stats_pathways %>%
arrange(p.value, t.score)
# Install and load the readxl package if you haven't already
install.packages("readxl")
library(readxl)
install.packages("dplyr")
library(dplyr)
# Set the file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/F8movsF3mo_msms_EC_stats_pathways.xlsx"
# Read the Excel file into a dataframe
F8movsF3mo_msms_EC_stats_pathways <- read_excel(file_path)
# Display the first few rows of the dataframe
head(F8movsF3mo_msms_EC_stats_pathways)
# Order the dataframe by p.value and t.score
F8movsF3mo_msms_EC_stats_pathways <- F8movsF3mo_msms_EC_stats_pathways %>%
arrange(p.value, t.score)
# Display the first few rows of the sorted dataframe
head(F8movsF3mo_msms_EC_stats_pathways)
View(F8movsF3mo_msms_EC_stats_pathways)
# Install and load the readxl package if you haven't already
install.packages("readxl")
library(readxl)
install.packages("dplyr")
library(dplyr)
library(openxlsx)
# Set the file path
file_path <- "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/F8movsF3mo_msms_EC_stats_pathways.xlsx"
# Read the Excel file
df <- read_excel(file_path)
# Filter out rows where p.value is > 0.05 and Matched.Compound is "NA"
df_filtered <- df %>%
filter(p.value <= 0.05, Matched.Compound != "NA")
# Sort by the absolute value of t.score in descending order and select the top 10 rows
top10_df <- df_filtered %>%
arrange(desc(abs(t.score))) %>%
head(12)
# Write the resulting data frame to a new Excel file
write.xlsx(top10_df, "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/Top10_F8movsF3mo_msms_EC_stats_pathways.xlsx")
# Read the Excel file
df <- read_excel(file_path)
# Filter out rows where p.value is > 0.05 and Matched.Compound is "NA"
df_filtered <- df %>%
filter(p.value <= 0.05, Matched.Compound != "NA")
# Sort by the absolute value of t.score in descending order and select the top 10 rows
top10_df <- df_filtered %>%
arrange(desc(abs(t.score))) %>%
head(20)
# Write the resulting data frame to a new Excel file
write.xlsx(top10_df, "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/Top10_F8movsF3mo_msms_EC_stats_pathways.xlsx")
# Read the Excel file
df <- read_excel(file_path)
# Filter out rows where p.value is > 0.05 and Matched.Compound is "NA"
df_filtered <- df %>%
filter(p.value <= 0.05, Matched.Compound != "NA")
# Sort by the absolute value of t.score in descending order and select the top 10 rows
top10_df <- df_filtered %>%
arrange(desc(abs(t.score))) %>%
head(50)
# Write the resulting data frame to a new Excel file
write.xlsx(top10_df, "C:/Users/Remi/Documents/TAMUCC M.S chemi/Medaka Bone metabolic study/Metaboanalyst_inR/MetabAnalyst_inR/MetaboAnalystR_3_29_24/Table figure 2 and 3/Top10_F8movsF3mo_msms_EC_stats_pathways.xlsx")
View(top10_df)
